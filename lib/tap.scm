;;; Mini TAP implementation. See Perl's Test::Simple.
;;; Ashton Wiersdorf

(define plan-tests)
(define ok)
(define is)
(define is-eq)
(define done-testing)

(let ((tests-planned 0)
      (tests-run 0)
      (tests-succeeded 0))
  (set! plan-tests (lambda (tests)
		     (set! tests-planned tests)
		     (write-string "1..")
		     (write-line tests)))
  (set! ok (lambda (test test-name)
	     (set! tests-run (+ tests-run 1))
	     (if test
		 (begin
		   (set! tests-succeeded (+ tests-succeeded 1))
		   (write-string "ok ")
		   (write tests-run)
		   (write-string " - ")
		   (write-string test-name)
		   (write-string "\n"))
		 (begin
		   (write-string "fail ")
		   (write tests-run)
		   (write-string " - ")
		   (write-string test-name)
		   (write-string "\n")))))
  (set! is (lambda (two one test-name)
	     (set! tests-run (+ tests-run 1))
	     (if (equal? one two)
		 (begin
		   (set! tests-succeeded (+ tests-succeeded 1))
		   (write-string "is ")
		   (write tests-run)
		   (write-string " - ")
		   (write-string test-name)
		   (write-string "\n"))
		 (begin
		   (write-string "fail ")
		   (write tests-run)
		   (write-string " - ")
		   (write-string test-name)
		   (write-string "\nExpected: ")
		   (write one)
		   (write-string "\n     Got: ")
		   (write-line two)))))
  (set! is-eq (lambda (two one test-name)
		(set! tests-run (+ tests-run 1))
		(if (eq? one two)
		    (begin
		      (set! tests-succeeded (+ tests-succeeded 1))
		      (write-string "is-eq ")
		      (write tests-run)
		      (write-string " - ")
		      (write-string test-name)
		      (write-string "\n"))
		    (begin
		      (write-string "fail ")
		      (write tests-run)
		      (write-string " - ")
		      (write-string test-name)
		      (write-string "\nExpected: ")
		      (write one)
		      (write-string "\n     Got: ")
		      (write-line two)))))
  (set! done-testing (lambda ()
		       (if (= tests-run tests-succeeded)
			   (if (> 1 tests-planned)
			       (write-string "All tests successful.\n") ; No tests planned
			       (if (= tests-planned tests-run)
				   (write-string "All tests successful.\n")
				   (begin
				     (write-string "Looks like you planned to run ")
				     (write tests-planned)
				     (write-string " but ran only ")
				     (write tests-run)
				     (write-string ".\n")
				     (if (= tests-planned tests-run)
					 (begin
					   (write-string "All tests run.\n")
					   (write tests-succeeded)
					   (write-string " out of ")
					   (write tests-run)
					   (write-string " tests successful.\n"))
					 (begin
					   (write tests-run)
					   (write-string " out of ")
					   (write tests-planned)
					   (write-strings " tests run.\n")
					   (write tests-succeeded)
					   (write-string " out of ")
					   (write tests-run)
					   (write-string " tests successful.\n"))))))
			   (if (> 1 tests-planned)
			       (begin
				 (write tests-succeeded)
				 (write-string " out of ")
				 (write tests-run)
				 (write-string " tests successful.\n"))
			       (if (= tests-planned tests-run)
				   (begin
				     (write-string "All tests run.\n")
				     (write tests-succeeded)
				     (write-string " out of ")
				     (write tests-run)
				     (write-string " tests successful.\n"))
				   (begin
				     (write tests-run)
				     (write-string " out of ")
				     (write tests-planned)
				     (write-strings " tests run.\n")
				     (write tests-succeeded)
				     (write-string " out of ")
				     (write tests-run)
				     (write-string " tests successful.\n"))))))))